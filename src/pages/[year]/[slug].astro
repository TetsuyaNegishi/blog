---
import { readOne, readAll } from "../../lib/markdoc/read";
import { blog } from "../../lib/markdoc/frontmatter.schema";
import Renderer from "../../components/Renderer.astro";
import BlogPostMeta from "../../components/BlogPostMeta.astro";
import ContentLayout from "../../layouts/ContentLayout.astro";
import { SITE_URL } from "../../config";
import fs from 'fs/promises'

export async function getStaticPaths() {
  const dir = await fs.readdir('./content/blog')

  const posts2 = await Promise.all(dir.map(async d => {
    const posts = await readAll({
      directory: `blog/${d}`,
      frontmatterSchema: blog,
    });
    return posts.map(posts => {
      return {...posts, year: d}
    })
  }))

  const posts3 = posts2.flat()

  // we don't want to generate pages for posts that link to external websites
  const filteredPosts = posts3
    // .filter((p) => p.frontmatter.draft !== true)
    .filter(({ frontmatter }) => !frontmatter.external);

  const paths = filteredPosts.map((post) => {
    return { params: { slug: post.slug, year: post.year } };
  });

  return paths
}

const { slug, year } = Astro.params;
if (typeof slug !== "string") {
  throw Error(`slug should be string. Received: ${slug}`);
}

const { content, frontmatter } = await readOne({
  directory: `blog/${year}`,
  slug,
  frontmatterSchema: blog,
});

const ogImageAbsoluteUrl =
  frontmatter.external !== true && frontmatter.ogImagePath
    ? new URL(frontmatter.ogImagePath, SITE_URL).toString()
    : undefined;
---

<ContentLayout title={frontmatter.title} date={frontmatter.date}>
  <BlogPostMeta
    title={frontmatter.title}
    description={frontmatter.external ? undefined : frontmatter.description}
    publishDate={frontmatter.date.toISOString()}
    pagePath={`/blog/${slug}`}
    ogImageAbsoluteUrl={ogImageAbsoluteUrl}
    slot="meta"
  />
  <Renderer content={content} slot="content" />
</ContentLayout>
